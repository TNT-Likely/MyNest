name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (semver, e.g. 0.0.1)'
        required: true
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: 'false'

permissions:
  contents: read

jobs:
  build-backend:
    runs-on: ubuntu-latest
    concurrency:
      group: mynest-backend-${{ github.workflow }}-${{ github.ref || github.run_id }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile

      - name: Build frontend
        run: |
          cd frontend
          pnpm build

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build backend
        run: |
          go mod download
          CGO_ENABLED=0 GOOS=linux go build -o mynest ./backend/main.go

  build-extension:
    runs-on: ubuntu-latest
    concurrency:
      group: mynest-extension-${{ github.workflow }}-${{ github.ref || github.run_id }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Determine version for extension
        id: ext_version
        shell: bash
        run: |
          if [[ "${GITHUB_REF:-}" == refs/tags/v* ]]; then
            TAG_REF="${GITHUB_REF##*/}"
            VERSION="${TAG_REF#v}"
          else
            VERSION="${{ github.event.inputs.version || '0.0.1' }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update extension version
        run: |
          cd extensions/chrome-extension
          VERSION="${{ steps.ext_version.outputs.version }}"
          # 更新 package.json
          node -e "const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json'));pkg.version='$VERSION';fs.writeFileSync('package.json',JSON.stringify(pkg,null,2)+'\n');"
          # 更新 manifest.json
          node -e "const fs=require('fs');const manifest=JSON.parse(fs.readFileSync('manifest.json'));manifest.version='$VERSION';fs.writeFileSync('manifest.json',JSON.stringify(manifest,null,2)+'\n');"

      - name: Install Chrome extension dependencies
        run: |
          cd extensions/chrome-extension
          pnpm install --no-frozen-lockfile

      - name: Build Chrome extension
        run: |
          cd extensions/chrome-extension
          pnpm build

      - name: Package Chrome extension
        run: |
          cd extensions/chrome-extension/dist
          zip -r ../../../mynest-chrome-extension.zip ./* -x "*.map"

      - name: Upload Chrome extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: mynest-chrome-extension.zip
          retention-days: 30

  release:
    needs: [build-backend, build-extension]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    concurrency:
      group: mynest-release-${{ github.workflow }}-${{ github.ref || github.run_id }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Chrome extension artifact
        uses: actions/download-artifact@v4
        with:
          name: chrome-extension
          path: ./artifacts

      - name: Determine version and base tag
        id: vars
        shell: bash
        run: |
          INPUT_VERSION="${{ github.event.inputs.version }}"
          if [[ -n "$INPUT_VERSION" ]]; then
            VERSION="$INPUT_VERSION"
          else
            if [[ "${GITHUB_REF:-}" == refs/tags/v* ]]; then
              TAG_REF="${GITHUB_REF##*/}"
              VERSION="${TAG_REF#v}"
            else
              VERSION="0.0.1"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # 获取上一个 tag（不含当前 tag）
          TAG="v$VERSION"
          PREV_TAG=$(git tag --list --sort=-version:refname 'v*' | grep -v "^${TAG}$" | head -n1)
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Rename Chrome extension with version
        run: |
          mv ./artifacts/mynest-chrome-extension.zip ./mynest-chrome-extension-v${{ steps.vars.outputs.version }}.zip

      - name: Generate changelog from non-merge commits
        id: changelog
        shell: bash
        run: |
          set -euo pipefail
          TAG="v${{ steps.vars.outputs.version }}"
          PREV_TAG="${{ steps.vars.outputs.prev_tag }}"

          echo "Current tag: $TAG"
          echo "Previous tag: ${PREV_TAG:-none}"

          # 生成 commit 列表（排除 merge commit）
          if [[ -n "$PREV_TAG" ]]; then
            echo "Generating commit log from $PREV_TAG to HEAD"
            COMMITS=$(git log --no-merges --pretty=format:'- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))' "$PREV_TAG"..HEAD)
          else
            echo "No previous tag found, showing all commits"
            COMMITS=$(git log --no-merges --pretty=format:'- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))')
          fi

          # 写入 release notes 文件
          {
            echo "## 变更记录"
            echo ""
            echo "$COMMITS"
            echo ""
          } > RELEASE_NOTES.md

          echo "notes_file=RELEASE_NOTES.md" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            VERSION=${{ steps.vars.outputs.version }}
            GIT_SHA=${{ github.sha }}
            GITHUB_REPOSITORY=${{ github.repository }}
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/mynest:latest
            ${{ vars.DOCKERHUB_USERNAME }}/mynest:${{ steps.vars.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.vars.outputs.version }}
          name: MyNest v${{ steps.vars.outputs.version }}
          body_path: ${{ steps.changelog.outputs.notes_file }}
          files: |
            mynest-chrome-extension-v${{ steps.vars.outputs.version }}.zip
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}