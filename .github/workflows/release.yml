name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/mynest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push MyNest All-in-One image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          body: |
            ## 🚀 Docker Image

            **MyNest All-in-One（前端 + 后端 + 所有插件）:**
            ```bash
            docker pull ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
            ```

            ## 📦 快速部署

            ```bash
            # 下载配置文件
            wget https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            wget https://raw.githubusercontent.com/${{ github.repository }}/main/.env.example -O .env

            # 编辑配置（修改密码等）
            nano .env

            # 启动服务
            docker-compose up -d
            ```

            ## 🔗 访问应用

            - Web 界面: http://localhost:3000
            - 自动代理前后端，无需单独访问后端 API
            - 健康检查: http://localhost:3000/health

            ## ✨ 架构特点

            - **一个镜像包含所有服务**：Nginx + React 前端 + Go 后端 + 插件
            - **单端口访问**：只需暴露 3000 端口
            - **自动代理**：Nginx 处理 `/api/*` 到后端的代理
            - **生产就绪**：包含日志、健康检查、进程管理

            完整文档: https://github.com/${{ github.repository }}/blob/main/README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}